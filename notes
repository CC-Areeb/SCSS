gulp is the task runner which is going to run our compilation tasks
gulp-sass is the plug-in for gulp to compile our sass
sass package is used by the plug-in 
--save-dev flag means that these packages will be stored in the json file as dev dependancies 
a gulp js file for gulp to run and for compiling sass to css

name has to be like gulpfile.js cuz it works like this .... ðŸ˜…



src, dest, watch, series are the packages we will import for gulp


                            ************************* BIG NOTE *************************

always define your sass coding first and then define your normal css when you want to use the sass components 



Use partials for different sass coding as saving all in 1 file will make is too hard to read and messy
example: @import 'variables'; 
this is how we can import other sass files into our main sass file



using underscore (_) before naming the scss file will make sure that the it will not
compile in a css file as we are only using variables.scss to keep our code 
clean and readable.

This is how we define partials in a nutshell



Mixins:

/*
for small variations we would be duplicating code if not using 
mixins so better use mixins

We use mixins so that common properties can be written down
once in the mixin directive and we only need to write down
if we have variations like underlines or boldness 


we can also define a variable inside the mixin and use that
as a parameter and use it in different variations and have
different outcomes



example:
@mixin button ($some_variable){
    css rule 1
    css rule 2
    css rule 3
    ...

    background-color / color / any rule: $some_variable
}

then where ever we have called in the mixin, we can pass the variables
as the parameter and it will be taken by the mixin

.button-dollar_sign key{
    @include mixin($value); -----> value becauce we are using the "value" keyword for generating color shades
}
*/


& is used to access the properties like &:hover{ ... } 